1.在pom.xml文件中引入相关依赖
2.自带一个启动类文件
3.配置application.properties
4.编写一个实体类
5.基于JPA，实现DAO层
(即mapper层，对数据库进行持久化操作，他的方法是针对数据库操作的，基本用到的就是增删改查。
它只是个接口，只有方法名字，具体实现在mapper.xml中。)
[@Repository：标注数据访问层，可以告诉SpringMVC这是一个数据访问层，并将其申明为一个bean，
例如UserDao接口的实现类UserDaoImpl,在类上加注解@Repository("userDao")，bean的名称为userDao]

6.设计Service层业务代码
(业务层，存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类，
提供controller层调用的方法。)
[@Service:标注业务层，例如UserService接口的实现类，在类上加@Service("userService")，
bean的名称为userService]

7.设计Controller层
(控制器层，导入service层，调用service方法，controller通过接收
前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。)
[@Controller:控制层，在控制层类上加@Controller即可，确认其是一个控制层类]
[@ResponseBody：表示该方法的返回结果直接写入HTTP response body中]
[在使用@RequestMapping后，返回值通常解析为跳转路径]

8.在resource目录下新建templates以及static目录，分别用于存放html文件以及（js、css文件、图片)文件。
9.配置JPA,新建一个configuration包，用于存放项目配置类。

我的想法,流程:
首先确定好需要使用的东西,在pom和application这两个文件中配置.
编写实体类,这个实体类要和数据库里的参数挂钩.设计dao层,在这个层
中写好使用java调用数据库操作的代码和函数,是一个接口.
设计server层,这一层就是对Dao层的一个实现.设计controller层
这一层就是对用户访问哪个页面,进行什么操作做一个设计和实现.
写完之后,打开启动类,运行.